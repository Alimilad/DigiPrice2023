@using System.ComponentModel.DataAnnotations;
@using DNTPersianUtils.Core;
﻿<div class="px-4 py-2 text-justify">
    <h1 class="text-center bold text-2xl ">محاسبه قیمت خرید (تومان) </h1>
    <EditForm Model="@model" OnValidSubmit="Submited">
        <DataAnnotationsValidator />
        <div class="mb-4">
            <label class="block mb-1">قیمت فروش</label>
            <InputNumber @bind-Value=model.SellPrice @bind-Value:format="F2" class="w-full h-10 px-3 text-base placeholder-gray-600 border border-gray-700 rounded-lg focus:shadow-outline" />
            <ValidationMessage For="() => model.SellPrice" />

        </div>
        <div class="mb-4">
            <label class="block mb-1"> کمیسیون</label>
            <InputNumber @bind-Value=model.Commission @bind-Value:format="F2" class="w-full h-10 px-3 text-base placeholder-gray-600 border border-gray-700 rounded-lg focus:shadow-outline" />
            <ValidationMessage For="() => model.Commission" />

        </div>

        <div class="mb-4">
            <label class="block mb-1"> هزینه ها</label>
            <InputNumber @bind-Value=model.Costs @bind-Value:format="F2" class="w-full h-10 px-3 text-base placeholder-gray-600 border border-gray-700 rounded-lg focus:shadow-outline" />
            <ValidationMessage For="() => model.Costs" />

        </div>

        <div class="mb-4">
            <label class="block mb-1"> سود</label>
            <InputNumber @bind-Value=model.Profit @bind-Value:format="F2" class="w-full h-10 px-3 text-base placeholder-gray-600 border border-gray-700 rounded-lg focus:shadow-outline" />
            <ValidationMessage For="() => model.Profit" />
        </div>

        <div class="grid place-items-center">
            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">محاسبه</button>

        </div>

    </EditForm>
    @if (!string.IsNullOrEmpty(Result))
    {
        <div class="font-bold  text-green-500 mt-2 px-4 py-3" role="alert">
            <p> قیمت خرید: @Result</p>
        </div>  
        

    }

</div>

@code {
    CalculateBuyPriceViewModel model = new();
    string Result = "";
    double DigiShare;
    public void Submited()
    {
        Result = "";
        DigiShare = 0;
        if (model.SellPrice < 214300)
        {
            DigiShare = 1.09 * model.Commission/100 * model.SellPrice + 15675;
        }
        else
        {
            DigiShare = 1.09 * model.SellPrice * (0.07 + model.Commission/100);

        }

        Result = ((int)(model.SellPrice - DigiShare - model.Costs) / 1 + (model.Profit / 100)).NumberToText(Language.Persian) + " تومن ";
        

        // if (model.SellPrice < 1430000)
        // {

        //     var x = 100 * model.SellPrice - 1.1 * model.Commission * model.SellPrice - 105000 - 100 * model.Costs - model.Profit * model.Costs;
        //     var y = model.Profit + 100;

        //     //Result = ((int)(x / y)).NumberToText(Language.Persian) + " تومن ";

        //     var tmpTest = CalcTargetBuyPrice(model.Profit / 100.0, (double)model.SellPrice,
        //                                      model.Costs, model.Commission / 100.0, (double)(x / y));

        //     Result = ((int)(tmpTest)).NumberToText(Language.Persian) + " ریال ";
        // }
        // else
        // {

        //     double cost = Math.Min(1000000, Math.Max(100000, (double)model.SellPrice * 0.07));

        //     double x = 100 * (int)model.SellPrice - 1.1 * model.Commission * (int)model.SellPrice
        //             - (cost) - 100 * model.Costs - model.Profit * model.Costs;

        //     var y = model.Profit + 100;


        //     var tmpTest = CalcTargetBuyPrice(model.Profit / 100.0, (double)model.SellPrice,
        //                                      model.Costs, model.Commission / 100.0, x / y);

        //     model.BuyPrice = (int)tmpTest; 

        //     Result = ((int)(tmpTest)).NumberToText(Language.Persian) + " تومن ";

        // }
        //double sood = (model.SellPrice.Value - 1.09 * (model.Boxing + model.Commission * model.SellPrice.Value) - model.BuyPrice.Value - model.Costs) / (model.SellPrice.Value - 1.09 * (model.Boxing + model.Commission * model.SellPrice.Value));

        //if (model.SellPrice.Value > 71430)
        //{
        //    model.Boxing = (float)(0.07 * model.SellPrice.Value);
        //    if (model.Boxing > 50000) model.Boxing = 50000;
        //}
        //sood = (model.SellPrice.Value - 1.09 * (model.Boxing + model.Commission * model.SellPrice.Value) - model.BuyPrice.Value - model.Costs) / (model.SellPrice.Value - 1.09 * (model.Boxing + model.Commission * model.SellPrice.Value));
        //model.ResultProfit = sood.ToString();
        //model.ResultProfitInToman = (model.SellPrice.Value - 1.09 * (model.Boxing + model.Commission * model.SellPrice.Value) - model.BuyPrice.Value - model.Costs).ToString("0.00");
    }

    /// <summary>
    /// این تابع با آزمون و خطا بهترین قیمت خرید با توجه به درصد مدنظر فروشنده را پیدا میکند
    /// چون نمیتوان فرمول را مستقیم نوشت مجبوریم کمی آزمون و خطا انجام دهیم
    /// </summary>
    /// <param name="targetPercent">درصد سود مورد نظر از قیمت خرید</param>
    /// <param name="sellPrice">قیمت فروش محصول روی دیجیکالا</param>
    /// <param name="costs">هزینه های خود فروشنده مثل هزینه های بسته بندی و چاپ لیبل و ...</param>
    /// <param name="commission">درصد کمیسیون گروه کالایی که دیجیکالا از قیمت فروش برمیداره</param>
    /// <param name="initialeStimatePrice">تخمین اولیه قیمت خرید</param>
    /// <returns></returns>
    public double CalcTargetBuyPrice(
        double targetPercent, double sellPrice,
        double costs, double commission,
        double initialeStimatePrice)
    {
        double profitPercentBuy = 0;
        double sellerCost = costs;
        double sell = sellPrice;
        double buy = initialeStimatePrice;

        int increase = 0;
        int decrease = 0;

        do
        {

            //var fee = sell * commission / 100;
            double fee = sell * commission;
            double commistionTax = fee * 0.1;
            double cost = Math.Min(1000000, Math.Max(100000, sell * 0.07));
            double costTax = cost * 0.5 * 0.1;
            //double costTax = cost * 0.09;
            double incom = sell - fee - commistionTax - cost - costTax - sellerCost;
            double profit = incom - buy;
            //var profitPercentSell = Math.Round(profit * 100 / sell, 2);
            //var profitPercentIncom = Math.Round(profit * 100 / incom, 2);
            profitPercentBuy = Math.Round(profit / buy, 4);

            if (profitPercentBuy > targetPercent)
            {
                buy += 10;
                increase++;
            }
            else if (profitPercentBuy < targetPercent)
            {
                buy -= 10;
                decrease++;
            }

            if (increase > 0 && decrease > 0)
                break;

        } while (profitPercentBuy != targetPercent);

        return buy;
    }

    public class CalculateBuyPriceViewModel
    {
        [Required(ErrorMessage = "قیمت فروش الزامی است")]
        [Range(1, 10000000000000000000, ErrorMessage = "قیمت فروش باید از صفر بزرگتر باشد")]
        public int SellPrice { get; set; }
        public int? BuyPrice { get; set; }
        public int Costs { get; set; } = 10000;
        public int Commission { get; set; } = 21;
        public int Profit { get; set; } = 25;
    }
}